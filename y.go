// Code generated by goyacc grammar.y. DO NOT EDIT.

//line grammar.y:2
package nanogo

import __yyfmt__ "fmt"

//line grammar.y:2

//line grammar.y:5
type yySymType struct {
	yys           int
	stringval     string
	intval        int64
	floatval      float64
	boolval       bool
	typ           Type
	types         []Type
	expression    Expression
	expressions   []Expression
	statement     Statement
	statements    []Statement
	block         Block
	name_and_type struct {
		Name string
		Type Type
	}
	name_and_types []struct {
		Name string
		Type Type
	}
}

const INT64 = 57346
const FLOAT64 = 57347
const BOOL = 57348
const BOOL_VALUE = 57349
const INT_VALUE = 57350
const FLOAT_VALUE = 57351
const FUNC = 57352
const LEFT_BRACE = 57353
const RIGHT_BRACE = 57354
const LEFT_PARENTHESIS = 57355
const RIGHT_PARENTHESIS = 57356
const LEFT_BRACKET = 57357
const RIGHT_BRACKET = 57358
const MINUS = 57359
const PLUS = 57360
const ASTERISK = 57361
const SLASH = 57362
const EQUAL = 57363
const EQUAL_EQUAL = 57364
const EXCLAMATION_EQUAL = 57365
const RETURN = 57366
const COMMA = 57367
const IF = 57368
const LESS = 57369
const LESS_EQUAL = 57370
const GREATER = 57371
const GREATER_EQUAL = 57372
const VAR = 57373
const FOR = 57374
const PRINT = 57375
const IDENTIFIER = 57376

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INT64",
	"FLOAT64",
	"BOOL",
	"BOOL_VALUE",
	"INT_VALUE",
	"FLOAT_VALUE",
	"FUNC",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"LEFT_PARENTHESIS",
	"RIGHT_PARENTHESIS",
	"LEFT_BRACKET",
	"RIGHT_BRACKET",
	"MINUS",
	"PLUS",
	"ASTERISK",
	"SLASH",
	"EQUAL",
	"EQUAL_EQUAL",
	"EXCLAMATION_EQUAL",
	"RETURN",
	"COMMA",
	"IF",
	"LESS",
	"LESS_EQUAL",
	"GREATER",
	"GREATER_EQUAL",
	"VAR",
	"FOR",
	"PRINT",
	"IDENTIFIER",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 86,
	22, 0,
	23, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 37,
	-1, 87,
	22, 0,
	23, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 38,
	-1, 88,
	22, 0,
	23, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 39,
	-1, 89,
	22, 0,
	23, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 40,
	-1, 90,
	22, 0,
	23, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 41,
	-1, 91,
	22, 0,
	23, 0,
	27, 0,
	28, 0,
	29, 0,
	30, 0,
	-2, 42,
}

const yyPrivate = 57344

const yyLast = 206

var yyAct = [...]int{

	34, 17, 60, 19, 16, 44, 5, 4, 6, 81,
	43, 108, 24, 13, 3, 62, 21, 15, 46, 103,
	22, 65, 66, 39, 105, 40, 45, 29, 28, 30,
	37, 41, 42, 38, 100, 2, 99, 97, 80, 26,
	64, 63, 65, 66, 57, 67, 68, 32, 58, 31,
	69, 70, 71, 72, 23, 47, 54, 55, 20, 75,
	73, 59, 56, 50, 48, 49, 53, 27, 74, 52,
	25, 12, 78, 11, 106, 33, 92, 95, 96, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 94,
	51, 43, 102, 14, 36, 43, 101, 98, 64, 63,
	65, 66, 61, 18, 39, 104, 40, 107, 39, 1,
	40, 37, 41, 42, 38, 37, 41, 42, 38, 43,
	79, 0, 0, 43, 35, 7, 8, 9, 0, 0,
	0, 10, 39, 0, 40, 0, 39, 0, 40, 37,
	41, 42, 38, 37, 41, 42, 38, 93, 0, 0,
	64, 63, 65, 66, 0, 67, 68, 0, 77, 0,
	69, 70, 71, 72, 64, 63, 65, 66, 0, 67,
	68, 0, 76, 0, 69, 70, 71, 72, 64, 63,
	65, 66, 0, 67, 68, 0, 0, 0, 69, 70,
	71, 72, 64, 63, 65, 66, 0, 67, 68, 0,
	0, 0, 69, 70, 71, 72,
}
var yyPact = [...]int{

	-1000, 4, -27, -28, 121, 60, -1000, -1000, -1000, -1000,
	58, -30, 121, 44, -9, -1000, 121, 40, -13, -1000,
	57, -30, -1000, 54, 121, 121, -1000, 121, -1000, 35,
	33, 64, -1000, -1000, 112, -1000, -1000, -29, 5, 56,
	56, 56, 49, -1000, 121, 56, 56, 175, -1000, -1000,
	-1000, 47, 56, 46, 161, 147, 56, 108, -1000, 175,
	24, -16, 175, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 133, -30, -1000, -1000, 23, -1000,
	-1000, 56, 2, 2, -1000, -1000, 81, 81, 81, 81,
	81, 81, 22, -1000, 20, 84, 80, -1000, 175, -1000,
	6, -1000, -1000, 121, 10, 63, -1000, -1, -1000,
}
var yyPgo = [...]int{

	0, 109, 3, 103, 1, 15, 102, 2, 94, 0,
	17, 93, 13,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 2, 2, 2, 3, 3,
	4, 4, 10, 11, 11, 12, 12, 8, 8, 8,
	8, 8, 8, 8, 8, 9, 9, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 6, 6, 7, 7,
}
var yyR2 = [...]int{

	0, 0, 4, 12, 1, 1, 1, 7, 1, 3,
	0, 1, 2, 1, 3, 0, 1, 3, 3, 2,
	5, 5, 4, 3, 4, 0, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 4, 3, 3, 3,
	3, 3, 3, 10, 1, 3, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, 31, 10, 34, 34, -2, 4, 5, 6,
	10, 13, 13, -12, -11, -10, 34, -4, -3, -2,
	14, 25, -2, 14, 25, 13, -10, 13, -2, -4,
	-4, 14, 14, 11, -9, 12, -8, 31, 34, 24,
	26, 32, 33, 11, 34, 21, 13, -5, 8, 9,
	7, 34, 13, 10, -5, -5, 13, -9, -2, -5,
	-7, -6, -5, 18, 17, 19, 20, 22, 23, 27,
	28, 29, 30, 13, -5, 13, 11, 11, -5, 12,
	14, 25, -5, -5, -5, -5, -5, -5, -5, -5,
	-5, -5, -7, 14, -12, -9, -9, 14, -5, 14,
	14, 12, 12, 13, -4, 14, 11, -9, 12,
}
var yyDef = [...]int{

	1, -2, 0, 0, 0, 0, 2, 4, 5, 6,
	0, 15, 10, 0, 16, 13, 0, 0, 11, 8,
	0, 0, 12, 0, 0, 10, 14, 10, 9, 0,
	0, 0, 7, 25, 0, 3, 26, 0, 0, 0,
	0, 0, 0, 25, 0, 0, 46, 19, 31, 32,
	33, 34, 0, 0, 0, 0, 0, 0, 17, 18,
	0, 47, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 15, 25, 25, 0, 23,
	24, 0, 27, 28, 29, 30, -2, -2, -2, -2,
	-2, -2, 0, 35, 0, 0, 0, 22, 45, 36,
	0, 20, 21, 10, 0, 0, 25, 0, 43,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:81
		{
			yylex.(*lexer).result = &Program{}
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:83
		{
			yylex.(*lexer).result.Declarations = append(
				yylex.(*lexer).result.Declarations, &Declaration{yyDollar[3].stringval, yyDollar[4].typ})
		}
	case 3:
		yyDollar = yyS[yypt-12 : yypt+1]
//line grammar.y:86
		{
			typ := &FunctionType{Return: yyDollar[8].types}
			args := []string{}
			for _, nameAndType := range yyDollar[5].name_and_types {
				args = append(args, nameAndType.Name)
				typ.Args = append(typ.Args, nameAndType.Type)
			}
			yylex.(*lexer).result.Declarations = append(
				yylex.(*lexer).result.Declarations, &Declaration{yyDollar[3].stringval, typ})
			yylex.(*lexer).result.Assignments = append(
				yylex.(*lexer).result.Assignments, &Assignment{yyDollar[3].stringval, &Function{typ, args, yyDollar[11].statements}})
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:100
		{
			yyVAL.typ = &IntType{}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:102
		{
			yyVAL.typ = &FloatType{}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:104
		{
			yyVAL.typ = &BoolType{}
		}
	case 7:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:106
		{
			yyVAL.typ = &FunctionType{yyDollar[3].types, yyDollar[6].types}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:109
		{
			yyVAL.types = []Type{yyDollar[1].typ}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:111
		{
			yyVAL.types = append(yyDollar[1].types, yyDollar[3].typ)
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:114
		{
			yyVAL.types = []Type{}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:116
		{
			yyVAL.types = yyDollar[1].types
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:119
		{
			yyVAL.name_and_type = struct {
				Name string
				Type Type
			}{yyDollar[1].stringval, yyDollar[2].typ}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:122
		{
			yyVAL.name_and_types = []struct {
				Name string
				Type Type
			}{yyDollar[1].name_and_type}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:124
		{
			yyVAL.name_and_types = append(yyDollar[1].name_and_types, yyDollar[3].name_and_type)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:127
		{
			yyVAL.name_and_types = []struct {
				Name string
				Type Type
			}{}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:129
		{
			yyVAL.name_and_types = yyDollar[1].name_and_types
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:132
		{
			yyVAL.statement = &Declaration{yyDollar[2].stringval, yyDollar[3].typ}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:134
		{
			yyVAL.statement = &Assignment{yyDollar[1].stringval, yyDollar[3].expression}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:136
		{
			yyVAL.statement = &Return{yyDollar[2].expression}
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:138
		{
			yyVAL.statement = &If{yyDollar[2].expression, Block(yyDollar[4].statements)}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:140
		{
			yyVAL.statement = &For{yyDollar[2].expression, Block(yyDollar[4].statements)}
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:142
		{
			yyVAL.statement = &Print{yyDollar[3].expression}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:144
		{
			yyVAL.statement = Block(yyDollar[2].statements)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:146
		{
			yyVAL.statement = &Application{&Variable{yyDollar[1].stringval}, yyDollar[3].expressions}
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:149
		{
			yyVAL.statements = []Statement{}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:151
		{
			yyVAL.statements = append(yyDollar[1].statements, yyDollar[2].statement)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:154
		{
			yyVAL.expression = &Add{yyDollar[1].expression, yyDollar[3].expression}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:156
		{
			yyVAL.expression = &Sub{yyDollar[1].expression, yyDollar[3].expression}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:158
		{
			yyVAL.expression = &Mul{yyDollar[1].expression, yyDollar[3].expression}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:160
		{
			yyVAL.expression = &Div{yyDollar[1].expression, yyDollar[3].expression}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:162
		{
			yyVAL.expression = &Int{yyDollar[1].intval}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:164
		{
			yyVAL.expression = &Float{yyDollar[1].floatval}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:166
		{
			yyVAL.expression = &Bool{yyDollar[1].boolval}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:168
		{
			yyVAL.expression = &Variable{yyDollar[1].stringval}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:170
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:172
		{
			yyVAL.expression = &Application{&Variable{yyDollar[1].stringval}, yyDollar[3].expressions}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:174
		{
			yyVAL.expression = &Equal{yyDollar[1].expression, yyDollar[3].expression}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:176
		{
			yyVAL.expression = &Not{&Equal{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:178
		{
			yyVAL.expression = &LessThan{yyDollar[1].expression, yyDollar[3].expression}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:180
		{
			yyVAL.expression = &Not{&LessThan{yyDollar[3].expression, yyDollar[1].expression}}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:182
		{
			yyVAL.expression = &LessThan{yyDollar[3].expression, yyDollar[1].expression}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:184
		{
			yyVAL.expression = &Not{&LessThan{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line grammar.y:186
		{
			typ := &FunctionType{Return: yyDollar[6].types}
			args := []string{}
			for _, nameAndType := range yyDollar[3].name_and_types {
				args = append(args, nameAndType.Name)
				typ.Args = append(typ.Args, nameAndType.Type)
			}

			yyVAL.expression = &Function{typ, args, yyDollar[9].statements}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:198
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:200
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:203
		{
			yyVAL.expressions = []Expression{}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:205
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	}
	goto yystack /* stack new state and value */
}
